# settings for validator code generator

input-tag: "!filter"
output-tag: "!ebpf"
input-extension: ".c"
output-extension: ".ebpf"
compiler: clang-5.0
cflags: "-x c -ffreestanding -target bpf -O2 -c -o - -"
common:
  prolog: |+
    /*
     * filter method for ${NODE_NAME}
     *
     */
    #include <stdint.h>
    #include <stdbool.h>

    #ifndef NULL
    #define NULL 0
    #endif
    /* never accessed directly but the pointers are valid keys */
    struct node;
    struct property;
    struct ref;

    static int (*callback)(uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4) =
            (void *) 1;

    static int (*bpf_printf)(const char *fmt, ...) =
            (void *) 2;

    static int64_t (*get_int)(struct node *np, const char *name, bool *existsp) = 
            (void *) 3;

    static bool (*get_bool)(struct node *np, const char *name, bool *existsp) = 
            (void *) 4;

    static const char *(*get_str)(struct node *np, const char *name, bool *existsp) = 
            (void *) 5;

    static const char **(*get_strseq)(struct node *np, const char *name, bool *existsp) = 
            (void *) 6;

    static bool (*streq)(const char *str1, const char *str2) =
            (void *) 7;

    static bool (*anystreq)(const char **strv, const char *str2) =
            (void *) 8;

    static struct node *(*get_parent)(struct node *np) =
            (void *) 9;

    static const int64_t *(*get_intseq)(struct node *np, const char *name, int64_t *countp, bool *existsp) =
            (void *) 10;

  epilog: |
    /* ${NODE_NAME} ends */
node:
  select:
    # entry is select()
    entry: select
    prolog: |+
      /* prolog for ${NODE_NAME} */
      int select(struct node *np)
      {
          bool exists;

    epilog: |+

      /* comment here due to YAML formatting */
          return 0;
      }
  check:
    entry: check
    prolog: |+
      /* prolog for ${NODE_NAME} */
      int check(struct node *np)
      {
          bool exists;

    epilog: |+
      /* comment here due to YAML formatting */
          return 0;
      }
property:
  check:
    prolog: |+
      /* for ${PROPERTY_NAME} from ${RULE_NAME} rule */
      if (!(
    epilog: |+
      ))
        return -1000 - ${PROPERTY_INDEX};
    types:
      int:
        prolog: |+
          {
          const int64_t v = get_int(np, "${PROPERTY_NAME}", &exists);

        epilog: |+
          }
      uint:
        prolog: |+
          {
          const unsigned int v = get_uint(np, "${PROPERTY_NAME}", &exists);

        epilog: +
          }
      str:
        prolog: |+
          {
          const char *v = get_str(np, "${PROPERTY_NAME}", &exists);

        epilog: |+
          }
      bool:
        prolog: |+
          {
          const char *v = get_str(np, "${PROPERTY_NAME}", &exists);

        epilog: |+
          }
      strseq:
        prolog: |+
          {
          const char **v = get_strseq(np, "${PROPERTY_NAME}", &exists);

        epilog: |+
          }
      intseq:
        prolog: |+
          {
          int64_t temp_count;
          const int64_t *v = get_intseq(np, "${PROPERTY_NAME}", &temp_count, &exists);
          const int64_t count = temp_count;

        epilog: |+
          }
    categories:
      required:
        prolog: |+
          if (!exists)
              return -2000 - ${PROPERTY_INDEX};

        epilog: |+

      optional:
        prolog: |+
          if (!exists)
              goto skip_${PROPERTY_INDEX};

        epilog: |+
          skip_${PROPERTY_INDEX}:
            do { } while(0); /* fix goto that requires a statement */

